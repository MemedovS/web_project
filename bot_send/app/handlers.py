import os
import pytz
from dotenv import load_dotenv

from aiogram import Router, types
from aiogram.filters import CommandStart,Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.exceptions import TelegramAPIError
from datetime import datetime, timedelta
from bot_send.datadase.engine import session_maker
from bot_send.datadase.models import ChannelVisits
from datetime import datetime, timezone
from bot_send.app.handler_text import *

router = Router()

user_data = {}
load_dotenv()

ADMIN_USER_ID = os.getenv("ADMIN_USER_ID")
CRYPTO_WALLET_ADDRESS = os.getenv("CRYPTO_WALLET_ADDRESS")
PAYMENT_URL = os.getenv("PAYMENT_URL")




def get_local_time():
    local_tz = pytz.timezone('Europe/Moscow')
    utc_now = datetime.now(timezone.utc)  # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ UTC —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω–æ–π
    local_now = utc_now.astimezone(local_tz)
    return local_now.replace(microsecond=0)


async def send_welcome_message(bot, chat_id, username):
    photo_file_id = 'AgACAgIAAxkBAAICqmbgL_VxUJkjogRZBrYgJDHmOlw7AAKQ4zEbVJsAAUuseFx6Cvu_jgEAAwIAA3kAAzYE'

    try:
        photo_message = await bot.send_photo(chat_id=chat_id, photo=photo_file_id)
        print(f"–§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
    except TelegramAPIError as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")
        photo_message = None

    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üöÄ –ü–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é üöÄ", callback_data="free_consultation")],
        [InlineKeyboardButton(text="üíº –í—ã–±—Ä–∞—Ç—å –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å", callback_data="select_master_class")],
        # [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ —Å–µ—Å—Å–∏–∏", callback_data="cancel_all_sessions")],
        [InlineKeyboardButton(text="üü¢ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å", callback_data="request_callback")]
    ])

    welcome_message = (
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å üåü*{username}*üåü –≤ —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω—ã–π –º–∏—Ä WEB 3.0 –ø—Ä–æ–µ–∫—Ç–æ–≤!"
    )

    welcome_message_sent = await bot.send_message(chat_id=chat_id, text=welcome_message, reply_markup=markup,
                                                  parse_mode="Markdown")

    return photo_message.message_id if photo_message else None, welcome_message_sent.message_id


@router.message(CommandStart())
async def send_welcome(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data[user_id] = {
        "username": username,
        "welcome_message_id": None,
        "photo_message_id": None,
        "selected_master_class": None,
        "selected_date": None,
        "selected_time": None,
        "messages_to_delete": [],
        "awaiting_callback_message": False,
        "action_count": 0  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –¥–µ–π—Å—Ç–≤–∏–π
    }

    await message.delete()
    photo_message_id, welcome_message_id = await send_welcome_message(message.bot, message.chat.id, username)

    user_data[user_id]["photo_message_id"] = photo_message_id
    user_data[user_id]["welcome_message_id"] = welcome_message_id

    async with session_maker() as session:
        visit = ChannelVisits(
            id_te=user_id,
            name=username,
            description="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º",
            user_actions=0,  # –ù–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            created=get_local_time(),  # –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –∑–æ–Ω–µ
            updated=get_local_time()  # –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –∑–æ–Ω–µ
        )
        session.add(visit)
        await session.commit()


@router.callback_query()
async def process_callback_query(callback_query: types.CallbackQuery):
    data = callback_query.data
    user_id = callback_query.from_user.id
    chat_id = callback_query.message.chat.id
    bot = callback_query.message.bot

    messages_to_delete = user_data[user_id].get("messages_to_delete", [])
    for message_id in messages_to_delete:
        try:
            await bot.delete_message(chat_id=chat_id, message_id=message_id)
            print(f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id} –≤ —á–∞—Ç–µ {chat_id}")
        except TelegramAPIError as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}: {e}")

    user_data[user_id]["messages_to_delete"] = []
    # –õ–æ–≥–∏–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
    if data == "select_date_time":
        today = datetime.now().date()
        date_buttons = [
            InlineKeyboardButton(
                text=(today + timedelta(days=i)).strftime('%d-%m-%Y'),
                callback_data=f"select_class_date_{(today + timedelta(days=i)).strftime('%Y-%m-%d')}"
            ) for i in range(1, 8)
        ]
        date_rows = [date_buttons[i:i + 2] for i in range(0, len(date_buttons), 2)]
        date_markup = InlineKeyboardMarkup(inline_keyboard=date_rows)
        message = await callback_query.message.answer(
            "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–∞.",
            reply_markup=date_markup
        )
        await callback_query.answer()

    elif data.startswith("select_class_date_"):
        selected_date = data.split("_")[3]
        user_data[user_id]["selected_date"] = selected_date

        time_options = start_time
        time_buttons = [
            InlineKeyboardButton(text=f"{hour}:00", callback_data=f"time_class_{selected_date}_{hour}_00")
            for hour in time_options
        ]
        time_rows = [time_buttons[i:i + 3] for i in range(0, len(time_buttons), 3)]
        time_markup = InlineKeyboardMarkup(inline_keyboard=time_rows)

        message = await callback_query.message.answer(
            f"üïí –í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É: {selected_date}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–∞.",
            reply_markup=time_markup
        )
        await callback_query.answer()

    elif data.startswith("time_class_"):
        parts = data.split("_")
        selected_date, selected_hour = parts[2], parts[3]
        selected_time = f"{selected_hour}:00"
        selected_master_class = user_data[user_id]["selected_master_class"]

        await callback_query.message.answer(
            f"‚úÖ –í–∞—à –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ {selected_date} –≤ {selected_time}."
        )

        await bot.send_message(
            ADMIN_USER_ID,
            f"üóìÔ∏è **–ù–æ–≤—ã–π –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å**:\n"
            f"üì≤ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user_data[user_id]['username']}\n"
            f"üìÖ –î–∞—Ç–∞: {selected_date}\n"
            f"üïí –í—Ä–µ–º—è: {selected_time}\n"
            f"üíº –ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å: {selected_master_class}\n"
            f"üîî –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ –≤—Å—Ç—Ä–µ—á–µ."
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        async with session_maker() as session:
            visit = ChannelVisits(
                id_te=user_id,
                name=user_data[user_id]["username"],
                description=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å {selected_master_class} –Ω–∞ {selected_date} –≤ {selected_time}",
                user_actions=4,  # –ú–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–π—Å—Ç–≤–∏–π
                created=get_local_time(),  # –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –∑–æ–Ω–µ
                updated=get_local_time()
            )
            session.add(visit)
            await session.commit()

        await callback_query.answer()

    if data == "free_consultation":
        today = datetime.now().date()
        date_buttons = [
            InlineKeyboardButton(
                text=(today + timedelta(days=i)).strftime('%d-%m-%Y'),
                callback_data=f"select_consultation_date_{(today + timedelta(days=i)).strftime('%Y-%m-%d')}"
            ) for i in range(1, 8)
        ]
        date_rows = [date_buttons[i:i + 2] for i in range(0, len(date_buttons), 2)]
        date_markup = InlineKeyboardMarkup(inline_keyboard=date_rows)
        message = await callback_query.message.answer(
            "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏. –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.",
            reply_markup=date_markup
        )
        user_data[user_id]["messages_to_delete"].append(message.message_id)
        await callback_query.answer()

        async with session_maker() as session:
            visit = ChannelVisits(
                id_te=user_id,
                name=user_data[user_id]["username"],
                description="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –¥–∞—Ç—É –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏",
                user_actions=1,
                created=get_local_time(),  # –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –∑–æ–Ω–µ
                updated=get_local_time()
            )
            session.add(visit)
            await session.commit()

    elif data.startswith("select_consultation_date_"):
        selected_date = data.split("_")[3]
        user_data[user_id]["selected_date"] = selected_date

        time_options = start_time
        time_buttons = [
            InlineKeyboardButton(text=f"{hour}:00", callback_data=f"time_consultation_{selected_date}_{hour}_00")
            for hour in time_options
        ]
        time_rows = [time_buttons[i:i + 3] for i in range(0, len(time_buttons), 3)]
        time_markup = InlineKeyboardMarkup(inline_keyboard=time_rows)

        message = await callback_query.message.answer(
            f"üïí –í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É: {selected_date}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.",
            reply_markup=time_markup
        )
        user_data[user_id]["messages_to_delete"].append(message.message_id)
        await callback_query.answer()

    elif data.startswith("time_consultation_"):
        parts = data.split("_")
        selected_date, selected_hour = parts[2], parts[3]
        selected_time = f"{selected_hour}:00"

        await callback_query.message.answer(
            f"‚úÖ –í–∞—à–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {selected_date} –≤ {selected_time}. –ó–∞ —á–∞—Å –¥–æ –≤—Å—Ç—Ä–µ—á–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ —Å—Å—ã–ª–∫–æ–π –Ω–∞ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü-–∑–≤–æ–Ω–æ–∫."
        )

        await bot.send_message(
            ADMIN_USER_ID,
            f"üóìÔ∏è **–ù–æ–≤–∞—è –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è**:\n"
            f"üì≤ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user_data[user_id]['username']}\n"
            f"üìÖ –î–∞—Ç–∞: {selected_date}\n"
            f"üïí –í—Ä–µ–º—è: {selected_time}\n"
            f"üîî –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ –≤—Å—Ç—Ä–µ—á–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        async with session_maker() as session:
            visit = ChannelVisits(
                id_te=user_id,
                name=user_data[user_id]["username"],
                description=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –Ω–∞ {selected_date} –≤ {selected_time}",
                user_actions=2,
                created=get_local_time(),  # –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –∑–æ–Ω–µ
                updated=get_local_time()
            )
            session.add(visit)
            await session.commit()

        await callback_query.answer()

    elif data == "select_master_class":
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚Ä¢ Light (30 –º–∏–Ω) - —Å—Ç–æ–∏–º–æ—Å—Ç—å $150", callback_data="select_master_class_light")],
            [InlineKeyboardButton(text="‚Ä¢ Standart (60 –º–∏–Ω) - —Å—Ç–æ–∏–º–æ—Å—Ç—å $300",
                                  callback_data="select_master_class_standard")],
            [InlineKeyboardButton(text="‚Ä¢ Premium (120 –º–∏–Ω) - —Å—Ç–æ–∏–º–æ—Å—Ç—å $900",
                                  callback_data="select_master_class_premium")]
        ])
        message = await callback_query.message.answer(
            text=mast_class,
            reply_markup=markup, parse_mode='Markdown'
        )
        user_data[user_id]["messages_to_delete"].append(message.message_id)
        await callback_query.answer()

    elif data.startswith("select_master_class_"):
        master_class = data.split("_")[3]
        user_data[user_id]["selected_master_class"] = master_class

        if master_class == 'light':
            additional_text = light
        elif master_class == 'standard':
            additional_text = standard
        elif master_class == 'premium':
            additional_text = premium

        await callback_query.message.answer(additional_text, parse_mode='Markdown')

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–µ
        async with session_maker() as session:
            visit = ChannelVisits(
                id_te=user_id,
                name=user_data[user_id]["username"],
                description=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å: {master_class}",
                user_actions=3,
                created=get_local_time(),  # –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –∑–æ–Ω–µ
                updated=get_local_time()
            )
            session.add(visit)
            await session.commit()

        payment_markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–°–µ—Ä–≤–∏—Å bestchange.ru", url=PAYMENT_URL)],
            [InlineKeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫", callback_data="send_payment_receipt")]
        ])
        await callback_query.message.answer(
            f"üí≥ –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏ –ø—Ä–æ–∏–∑–≤–µ–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É.\n\n"
            f"–ù–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞ *(USDT **TRC-20**)*: *{CRYPTO_WALLET_ADDRESS}*\n\n"
            '(–º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—Å—è —Å–µ—Ä–≤–∏—Å–æ–º *bestchange*)\n\n'
            "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫–∞–Ω –∏–ª–∏ —Ñ–æ—Ç–æ –≤–∞—à–µ–≥–æ —á–µ–∫–∞, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ.",
            reply_markup=payment_markup,
            parse_mode="Markdown"
        )
        await callback_query.answer()


    elif data == "send_payment_receipt":
        user_data[user_id]["awaiting_payment_receipt"] = True
        await callback_query.message.answer(
            "üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ —Å–∫–∞–Ω –≤–∞—à–µ–≥–æ —á–µ–∫–∞ –æ–ø–ª–∞—Ç—ã. –ú—ã –ø—Ä–æ–≤–µ—Ä–∏–º –µ–≥–æ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–º –ø–æ–ª—É—á–µ–Ω–∏–µ."
        )
        await callback_query.answer()

    elif data == "cancel_all_sessions":
        user_data[user_id]["selected_master_class"] = None
        user_data[user_id]["selected_date"] = None
        user_data[user_id]["selected_time"] = None

        await callback_query.message.answer(
            "‚ùå –í—Å–µ –≤–∞—à–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –±—ã–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã. –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –Ω–æ–≤—ã–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º—è –∏–ª–∏ –∑–∞–∫–∞–∑–∞—Ç—å –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è."
        )
        await callback_query.answer()

    elif data == "request_callback":
        await callback_query.message.answer(
            "–ù–∞–ø–∏—à–∏—Ç–µ –í–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
        )
        user_data[user_id]["awaiting_callback_message"] = True
        await callback_query.answer()


@router.message()
async def handle_text_messages(message: types.Message):
    user_id = message.from_user.id
    bot = message.bot

    if user_data.get(user_id, {}).get("awaiting_callback_message"):
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É
        await bot.send_message(
            ADMIN_USER_ID,
            f"üó®Ô∏è **–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è** @{user_data[user_id]['username']}:\n\n"
            f"**–°–æ–æ–±—â–µ–Ω–∏–µ:**\n{message.text}\n\n"
            f"üïí **–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ."
        )

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
        await message.answer(text=messa_answer
                             )

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
        user_data[user_id]["awaiting_callback_message"] = False

    elif user_data.get(user_id, {}).get("awaiting_payment_receipt"):
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ–∫–∞ –∞–¥–º–∏–Ω—É
        if message.photo:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–æ—Ç–æ
            photo = message.photo[-1]  # –ü–æ–ª—É—á–∞–µ–º —Å–∞–º–æ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            await bot.send_photo(
                ADMIN_USER_ID,
                photo=photo.file_id,
                caption=f"üí∏ **–ß–µ–∫ –æ–ø–ª–∞—Ç—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è** @{user_data[user_id]['username']}:\n\n"
                        f"üïí **–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n"
                        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —á–µ–∫ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–∏–µ."
            )
        elif message.document:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–æ–∫—É–º–µ–Ω—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, PDF)
            document = message.document
            await bot.send_document(
                ADMIN_USER_ID,
                document=document.file_id,
                caption=f"üí∏ **–ß–µ–∫ –æ–ø–ª–∞—Ç—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è** @{user_data[user_id]['username']}:\n\n"
                        f"üïí **–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n"
                        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —á–µ–∫ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–∏–µ."
            )

        # –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ–∫–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
        await message.answer(
            "‚úÖ –í–∞—à —á–µ–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫—É—Ä–∞—Ç–æ—Ä—É. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –∏ –∑–∞–±—Ä–æ–Ω–∏—Ä—É–π—Ç–µ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å.",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="–í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è", callback_data="select_date_time")]
                ]
            )
        )

        user_data[user_id]["awaiting_payment_receipt"] = False
